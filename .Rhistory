## gamma = daily prob E -> I; delta = daily prob I -> R;
browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
probaStoE <- rep(0,n) ## initialize the probability of S -> E
for (i in n) {
probaStoE[i] <- lambda*beta[i]*sum(beta[which(x==2)])
}
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
x
P <- lambda*beta*sum(beta[which(x==2)])
P==probaStoE
u
x
S
u
u<probaStoE
print(sample(c(2,5,3), size=3, replace=FALSE))
print(sample(c(2,5,3), size=3, replace=TRUE))
x==0
u<probaStoE
which(x==0)
sample(c(5,8),size=5,prob = c(1,5))
sample(c(5,8),size=5,prob = c(1,5),replace = TRUE)
sample(which(x==0),size = len(S[1]), prob = probaStoE[which(x==0)])
sample(which(x==0),size = length(S[1]), prob = probaStoE[which(x==0)])
seir_covid <- function(n=5000000,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
probaStoE <- rep(0,n) ## initialize the probability of S -> E
for (i in n) {
probaStoE[i] <- lambda*beta[i]*sum(beta[which(x==2)])
}
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=200,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=200,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
print(S)
print(E)
print(I)
print(R)
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=50,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
print(S)
print(E)
print(I)
print(R)
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid()
seir_covid <- function(n=50,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
print(S)
print(E)
print(I)
print(R)
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=50,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=30,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid <- function(n=30,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=30,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
probaStoE
lambda*beta*sum(beta[which(x==2)])
seir_covid <- function(n=30,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=30,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=5000,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=5500000,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
S
seir_covid <- function(n=5500000,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
# Randomly generate the
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
S
seir_covid <- function(n=5500000,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
list(S=S,E=E,I=I,R=R,beta=beta)
} ## seir
seir_covid()
seir_covid <- function(n=5500000,ni=10,nt=100,gamma=1/3,delta=1/5) {
## SEIR stochastic simulation model.
## n = population size; ni = initially infective; nt = number of days
## gamma = daily prob E -> I; delta = daily prob I -> R;
#browser()
lambda = 0.4/n ## lambda = 0.4/n
x <- rep(0,n) ## initialize to susceptible state
x[1:ni] <- 1 ## create some infectives
S <- E <- I <- R <- rep(0,nt) ## set up storage for pop in each state
S[1] <- n-ni;E[1] <- ni ## initialize
beta <- rlnorm(n,0,0.5); beta <- beta/mean(beta) ## individual infection rates
## initialize the probability of S -> E
probaStoE <- lambda*beta*sum(beta[which(x==2)])
for (i in 2:nt) { ## loop over days
u <- runif(n) ## uniform random deviates
x[x==2&u<delta] <- 3 ## I -> R with prob delta
x[x==1&u<gamma] <- 2 ## E -> I with prob gamma
x[x==0&u<probaStoE] <- 1 ## S -> E with probaStoE
# sum over all SEIR
S[i] <- sum(x==0); E[i] <- sum(x==1)
I[i] <- sum(x==2); R[i] <- sum(x==3)
probaStoE <- lambda*beta*sum(beta[which(x==2)])
#cat(sum(c(S[i],E[i],I[i],R[i])))
}
SEIR = list(S=S,E=E,I=I,R=R,beta=beta)
return(SEIR)
} ## seir
seir_covid()
c(S,E,I,R)=seir_covid()
SEIR <- seir_covid()
SEIR
SEIR["S"]
SEIR["S"][1]
SEIR[1]
class(SEIR)
SEIR[2]
SEIR[3]
SEIR[3][1]
SEIR[3][15]
SEIR[3][1][1]
SEIR$S
SEIR$S[2]
SEIR$S[10]
